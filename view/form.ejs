<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= templateName %></title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <style>
    * {
      box-sizing: border-box;
    }
    body {
      font-family: 'Inter', sans-serif;
      background: <%= theme === 'dark' ? '#000000' : '#ffffff' %>;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
      padding: 40px 10px 20px;
      transition: background 0.3s ease;
    }
    .login-container {
      background: <%= theme === 'dark' ? '#000000' : '#ffffff' %>;
      padding: 32px;
      border-radius: 16px;
      width: 100%;
      max-width: 600px;
      min-height: <%= minHeight %>;
      height: auto;
      text-align: center;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 16px;
      opacity: 1;
    }
    .login-container:hover {
      transform: scale(1.02);
    }
    .login-container h2 {
      font-size: 2rem;
      font-weight: 700;
      color: <%= theme === 'dark' ? '#ffffff' : '#000000' %>;
      margin: 16px 0 16px;
    }
    .login-container p {
      font-size: 1.17rem;
      font-weight: 600;
      color: <%= subheaderColor %>;
      margin: 0 0 0px;
    }
    .login-container span {
      cursor: default;
      pointer-events: none;
      position: relative;
      display: inline-block;
      margin: 0;
      letter-spacing: 0.5px;
    }
    .login-container span.space {
      margin-right: 4px;
      letter-spacing: 0;
      width: 4px;
      display: inline-block;
    }
    .form-fields {
      width: 100%;
      max-width: 600px;
      display: flex;
      flex-direction: column;
      gap: 8px;
    }
    .input-container {
      position: relative;
      width: 100%;
    }
    .login-container input {
      width: 100%;
      padding: 24px 48px 24px 16px;
      margin: 16px 0;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.2s ease;
      border: none;
      background: <%= theme === 'dark' ? '#000000' : '#ffffff' %>;
      color: <%= theme === 'dark' ? '#ffffff' : '#000000' %>;
      display: block;
    }
    .login-container input::placeholder {
      color: <%= theme === 'dark' ? '#cccccc' : '#666666' %>;
      opacity: 1;
    }
    .login-container input:focus {
      outline: none;
      box-shadow: 0 0 0 3px rgba(0, 183, 255, 0.3);
      background: <%= theme === 'dark' ? '#000000' : '#ffffff' %>;
    }
    .login-container input:not(:placeholder-shown) {
      background: <%= theme === 'dark' ? '#000000' : '#ffffff' %>;
    }
    .login-container button {
      width: 100%;
      padding: 20px;
      margin: 0;
      border-radius: 50px;
      font-size: 0.95rem;
      transition: all 0.2s ease;
      background: <%= buttonColor %>;
      color: <%= buttonTextColor %>;
      border: none;
      cursor: pointer;
      font-weight: 500;
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    .login-container button:hover {
      transform: translateY(-2px);
      background: <%= buttonColor.includes('linear-gradient') ? 'linear-gradient(45deg, #0078ff, #005bb5)' : buttonColor %>;
    }
    .login-container button:disabled {
      opacity: 1; /* Prevent fading */
      cursor: not-allowed;
      background: <%= buttonColor %>; /* Retain original background color */
    }
    .login-container button.loading {
      background: <%= buttonColor %>; /* Retain original background during loading */
      cursor: not-allowed;
      transition: none; /* Disable transitions during loading */
    }
    .spinner {
      border: 3px solid #d1d5db;
      border-top: 3px solid #d1d5db;
      border-radius: 50%;
      width: 16px;
      height: 16px;
      animation: spin 0.6s linear infinite;
      position: absolute;
      top: 50%;
      left: 50%;
      margin: -8px 0 0 -8px;
      display: none;
    }
    .loading .spinner {
      display: block;
    }
    .loading .button-text {
      visibility: hidden;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .toggle-password {
      position: absolute;
      right: 16px;
      top: 50%;
      transform: translateY(-50%);
      cursor: pointer;
      color: <%= theme === 'dark' ? '#cccccc' : '#555555' %>;
      font-size: 1rem;
      transition: color 0.2s ease;
      z-index: 1;
    }
    .toggle-password:hover {
      color: <%= theme === 'dark' ? '#ffffff' : '#000000' %>;
    }
    .popup {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0.8);
      background: <%= theme === 'dark' ? '#000000' : '#ffffff' %>;
      padding: 20px;
      border-radius: 12px;
      z-index: 1000;
      text-align: center;
      max-width: 300px;
      width: 90%;
      transition: transform 0.3s ease, opacity 0.3s ease;
      border: 1px solid rgba(0, 183, 255, <%= theme === 'dark' ? '0.2' : '0.1' %>);
    }
    .popup.show {
      display: block;
      transform: translate(-50%, -50%) scale(1);
      opacity: 1;
    }
    .popup h4 {
      font-size: 1rem;
      font-weight: 600;
      color: <%= theme === 'dark' ? '#ffffff' : '#000000' %>;
      margin-bottom: 12px;
    }
    .popup p {
      font-size: 0.85rem;
      color: <%= theme === 'dark' ? '#cccccc' : '#666666' %>;
      margin-bottom: 12px;
      line-height: 1.4;
    }
    .popup-close {
      position: absolute;
      top: 8px;
      right: 8px;
      background: none;
      border: none;
      font-size: 0.85rem;
      color: <%= theme === 'dark' ? '#cccccc' : '#555555' %>;
      cursor: pointer;
      transition: color 0.2s ease;
    }
    .popup-close:hover {
      color: #00b7ff;
    }
    .overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 999;
      backdrop-filter: blur(2px);
      transition: opacity 0.3s ease;
    }
    .overlay.show {
      display: block;
      opacity: 1;
    }
    @media (max-width: 768px) {
      body {
        padding: 30px 5px 16px;
      }
      .login-container {
        max-width: 100%;
        padding: 24px;
      }
      .form-fields {
        max-width: 100%;
        gap: 6px;
      }
      .login-container h2 {
        font-size: 1.8rem;
        margin: 16px 0 16px;
      }
      .login-container p {
        font-size: 1.11rem;
        margin: 0 0 0px;
      }
      .login-container input, .login-container button {
        padding: 20px 48px 20px 12px;
        font-size: 0.9rem;
      }
      .login-container button {
        padding: 18px;
        border-radius: 50px;
        margin: 0;
      }
      .popup {
        width: 80%;
        max-width: 280px;
        padding: 16px;
      }
    }
    @media (max-width: 480px) {
      .login-container {
        max-width: 100%;
      }
      .form-fields {
        max-width: 100%;
        gap: 4px;
      }
      .login-container h2 {
        font-size: 1.6rem;
        margin: 16px 0 16px;
      }
      .login-container p {
        font-size: 0.99rem;
        margin: 0 0 0px;
      }
      .login-container input, .login-container button {
        padding: 18px 48px 18px 10px;
        font-size: 0.85rem;
      }
      .login-container button {
        padding: 16px;
        border-radius: 50px;
        margin: 0;
      }
      .popup {
        max-width: 260px;
      }
    }
  </style>
</head>
<body>
  <div class="login-container">
    <h2 id="login-header"><%- headerHtml %></h2>
    <p id="login-subheader" style="color: <%= subheaderColor %>"><%= subheaderText %></p>
    <div class="form-fields">
      <div id="input-fields">
        <% fields.forEach(field => { %>
          <div class="input-container">
            <input type="<%= field.type %>" id="login-<%= field.id %>" placeholder="<%= field.placeholder %>" style="box-shadow: <%= borderShadow %>;">
            <% if (field.type === 'password') { %>
              <i class="fas fa-eye toggle-password" data-input="login-<%= field.id %>"></i>
            <% } %>
          </div>
        <% }) %>
      </div>
      <button id="login-button" style="background: <%= buttonColor %>; color: <%= buttonTextColor %>;">
        <span class="button-text"><%= buttonText %></span>
        <div class="spinner"></div>
      </button>
    </div>
  </div>
  <div class="overlay" id="message-overlay"></div>
  <div class="popup" id="message-popup" role="alertdialog" aria-labelledby="message-popup-title">
    <button class="popup-close" id="message-popup-close" aria-label="Close message popup">&times;</button>
    <h4 id="message-popup-title">Message</h4>
    <p id="message-text"></p>
  </div>

  <script>
    const templates = {
      'sign-in': {
        name: 'Sign In Form',
        fields: [
          {
            id: 'email',
            placeholder: 'Email or Phone Number',
            type: 'text',
            validation: {
              required: true,
              regex: '^((\\+?\\d{1,3}[-.\\s]?\\d{1,14})|([^\\s@]+@[^\\s@]+\\.[^\\s@]+))$',
              errorMessage: 'Please enter a valid email or phone number.'
            }
          },
          {
            id: 'password',
            placeholder: 'Password',
            type: 'password',
            validation: { required: true }
          }
        ]
      },
      'contact': {
        name: 'Contact Form',
        fields: [
          {
            id: 'phone',
            placeholder: 'Phone Number',
            type: 'tel',
            validation: { required: true }
          },
          {
            id: 'email',
            placeholder: 'Email or Phone Number',
            type: 'text',
            validation: {
              required: true,
              regex: '^((\\+?\\d{1,3}[-.\\s]?\\d{1,14})|([^\\s@]+@[^\\s@]+\\.[^\\s@]+))$',
              errorMessage: 'Please enter a valid email or phone number.'
            }
          }
        ]
      },
      'payment-checkout': {
        name: 'Payment Checkout Form',
        fields: [
          {
            id: 'card-number',
            placeholder: 'Card Number',
            type: 'text',
            validation: {
              required: true,
              regex: '^\\d{4}\\s?\\d{4}\\s?\\d{4}\\s?\\d{4}$',
              errorMessage: 'Please enter a valid 16-digit card number.'
            }
          },
          {
            id: 'exp-date',
            placeholder: 'Expiration Date (MM/YY)',
            type: 'text',
            validation: { required: true }
          },
          {
            id: 'cvv',
            placeholder: 'CVV',
            type: 'text',
            validation: { required: true }
          }
        ]
      }
    };

    const loginButton = document.getElementById('login-button');
    const messagePopup = document.getElementById('message-popup');
    const messageOverlay = document.getElementById('message-overlay');
    const messagePopupClose = document.getElementById('message-popup-close');
    const messageText = document.getElementById('message-text');
    const inputFieldsContainer = document.getElementById('input-fields');

    function normalizeUrl(url) {
      if (!url) return null;
      url = url.trim();
      if (url.match(/^https?:\/\//)) return url;
      if (url.match(/\.[a-z]{2,}$/i)) return 'https://' + url;
      return null;
    }

    function showMessagePopup(message) {
      messageText.textContent = message || 'Welcome! You have clicked the button.';
      messagePopup.classList.add('show');
      messageOverlay.classList.add('show');
    }

    function hideMessagePopup() {
      messagePopup.classList.remove('show');
      messageOverlay.classList.remove('show');
    }

    function checkFormFilled() {
      const inputs = inputFieldsContainer.querySelectorAll('input');
      const templateFields = templates['<%= template %>'].fields;

      for (let i = 0; i < inputs.length; i++) {
        const input = inputs[i];
        const value = input.value.trim();
        const fieldId = input.id.replace('login-', '');
        const templateField = templateFields.find(field => field.id === fieldId);

        if (!value && (!templateField || templateField.validation.required)) {
          showMessagePopup('Please fill all required fields before proceeding.');
          return false;
        }

        if (templateField && templateField.validation && templateField.validation.regex) {
          try {
            const regex = new RegExp(templateField.validation.regex);
            if (!regex.test(value)) {
              showMessagePopup(templateField.validation.errorMessage);
              return false;
            }
          } catch (e) {
            console.error('Invalid regex for field:', fieldId, e);
          }
        }
      }
      return true;
    }

    async function submitFormData() {
      const inputs = inputFieldsContainer.querySelectorAll('input');
      const formData = {};
      inputs.forEach(input => {
        const fieldId = input.id.replace('login-', '');
        formData[fieldId] = input.value.trim();
      });

      try {
        const response = await fetch('/form/<%= formId %>/submit', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });
        const result = await response.json();
        if (!response.ok) {
          console.error('Submission failed:', result.error);
          showMessagePopup(result.error || 'Failed to submit form.');
          return false;
        }
        console.log('Submission successful:', result);
        return true;
      } catch (error) {
        console.error('Error submitting form:', error);
        showMessagePopup('An error occurred while submitting the form.');
        return false;
      }
    }

    const togglePasswordButtons = document.querySelectorAll('.toggle-password');
    togglePasswordButtons.forEach(button => {
      button.addEventListener('click', () => {
        const inputId = button.getAttribute('data-input');
        const input = document.getElementById(inputId);
        if (input.type === 'password') {
          input.type = 'text';
          button.classList.remove('fa-eye');
          button.classList.add('fa-eye-slash');
        } else {
          input.type = 'password';
          button.classList.remove('fa-eye-slash');
          button.classList.add('fa-eye');
        }
      });
    });

    try {
      loginButton.addEventListener('click', async () => {
        const buttonText = loginButton.querySelector('.button-text');
        const spinner = loginButton.querySelector('.spinner');

        if (!checkFormFilled()) return;

        loginButton.classList.add('loading');
        loginButton.disabled = true;

        try {
          const submitted = await submitFormData();
          if (!submitted) return;

          const action = '<%= buttonAction %>';
          const url = '<%= buttonUrl %>';
          const message = '<%= buttonMessage %>';
          console.log('Button clicked:', { action, url, message });

          if (action === 'url') {
            const normalizedUrl = normalizeUrl(url);
            if (normalizedUrl) {
              console.log('Redirecting to:', normalizedUrl);
              window.location.href = normalizedUrl;
            } else {
              showMessagePopup('Please enter a valid URL (e.g., www.example.com).');
            }
          } else if (action === 'message') {
            showMessagePopup(message);
          } else {
            console.error('Invalid button action:', action);
            showMessagePopup('Error: Invalid button configuration.');
          }
        } catch (error) {
          console.error('Error during submission:', error);
          showMessagePopup('An error occurred. Please try again.');
        } finally {
          loginButton.classList.remove('loading');
          loginButton.disabled = false;
        }
      });

      messagePopupClose.addEventListener('click', hideMessagePopup);
      messageOverlay.addEventListener('click', hideMessagePopup);
    } catch (error) {
      console.error('Error in form script:', error);
      showMessagePopup('An error occurred. Please try again.');
    }
  </script>
</body>
</html>
